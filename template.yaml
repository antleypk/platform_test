AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: antleypk solution for 'https://github.com/IntuitiveWebSolutions/PDPlatformEngineerProject#deliverables'
Resources:
  ProjectAPI:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Dev
      DefinitionBody:
        swagger: "2.0"
        info:
          version: "1.0"
          title: "antleypkCode"
        host: "u2biz48gxc.execute-api.us-east-1.amazonaws.com"
        basePath: "/Prod"
        schemes:
        - "https"
        x-amazon-apigateway-binary-media-types:
          - '*/*'
        paths:
          /mailtest:
            get:
              responses: {}
              x-amazon-apigateway-integration:
                uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:153477074805:function:SAMEmailUsersAPI/invocations"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                type: "aws_proxy"
          /user:
            get:
              responses: {}
              x-amazon-apigateway-integration:
                uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:153477074805:function:SAMGetUsers/invocations"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                type: "aws_proxy"
          /user/{email}:
            put:
              responses: {}
              x-amazon-apigateway-integration:
                uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:153477074805:function:SAMAddUser/invocations"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                type: "aws_proxy"
            delete:
              responses: {}
              x-amazon-apigateway-integration:
                uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:153477074805:function:SAMDeleteUser/invocations"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                type: "aws_proxy"
  ConfigLambdaPermission:
    Type: "AWS::Lambda::Permission"
    DependsOn:
    - ProjectAPI
    - GetUsers
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref GetUsers
      Principal: apigateway.amazonaws.com
  GetUsers:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: SAMGetUsers
      Handler: GetUsers.lambda_handler
      Runtime: python3.6
      CodeUri: src 
      MemorySize: 128 
      Timeout: 30
      Policies:
        - AWSLambdaBasicExecutionRole
        - AmazonDynamoDBFullAccess
        - AmazonAPIGatewayInvokeFullAccess 
      Events:
        MyEndpoint:
          Type: Api 
          Properties:
            Path: /user
            Method: get
            RestApiId:
              Ref: ProjectAPI
      Environment:
        Variables:
          Users: !Ref SAMUsers
  ConfigLambdaPermission1:
    Type: "AWS::Lambda::Permission"
    DependsOn:
    - ProjectAPI
    - AddUser
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref AddUser
      Principal: apigateway.amazonaws.com
  AddUser:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: SAMAddUser
      Handler: AddUser.lambda_handler
      Runtime: python3.6 
      CodeUri: src 
      MemorySize: 128 
      Timeout: 30
      Policies:
        - AWSLambdaBasicExecutionRole
        - AmazonDynamoDBFullAccess
      Events:
        MyEndpoint:
          Type: Api 
          Properties:
            Path: /user/{email}
            Method: put
            RestApiId:
              Ref: ProjectAPI
      Environment:
        Variables:
          Users: !Ref SAMUsers
  ConfigLambdaPermission2:
    Type: "AWS::Lambda::Permission"
    DependsOn:
    - ProjectAPI
    - DeleteUser
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref DeleteUser
      Principal: apigateway.amazonaws.com
  DeleteUser:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: SAMDeleteUser
      Handler: DeleteUser.lambda_handler
      Runtime: python3.6 
      CodeUri: src 
      MemorySize: 128 
      Timeout: 30
      Policies:
        - AWSLambdaBasicExecutionRole
        - AmazonDynamoDBFullAccess
      Events:
        MyEndpoint:
          Type: Api 
          Properties:
            Path: /user/{email}
            Method: delete
            RestApiId:
              Ref: ProjectAPI
      Environment:
        Variables:
          Users: !Ref SAMUsers
  ConfigLambdaPermission3:
    Type: "AWS::Lambda::Permission"
    DependsOn:
    - ProjectAPI
    - EmailUsersAPI
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref EmailUsersAPI
      Principal: apigateway.amazonaws.com    
  EmailUsersAPI:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: SAMEmailUsersAPI
      Handler: EmailUsers.lambda_handler
      Runtime: python3.6 
      CodeUri: src 
      MemorySize: 128 
      Timeout: 30
      Policies:
        - AWSLambdaBasicExecutionRole
        - AmazonDynamoDBFullAccess
        - AmazonSESFullAccess
      Events:
        MyEndpoint:
          Type: Api 
          Properties:
            Path: /mailtest
            Method: get
            RestApiId:
              Ref: ProjectAPI
      Environment:
        Variables:
          Users: !Ref SAMUsers
  EmailUsersCloudWatch:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: SAMEmailUsersCloudWatch
      Handler: EmailUsers.lambda_handler
      Runtime: python3.6 
      CodeUri: src 
      MemorySize: 128 
      Timeout: 30
      Policies:
        - AWSLambdaBasicExecutionRole
        - AmazonDynamoDBFullAccess
        - AmazonSESFullAccess
      Events:
        DailyEmail:
          Type: Schedule
          Properties:
            Schedule: rate(1 day)
      Environment:
        Variables:
          Users: !Ref SAMUsers
  UnitTest:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: SAMUnitTest
      Handler: UnitTest.lambda_handler
      Runtime: python3.6 
      CodeUri: src 
      MemorySize: 128 
      Timeout: 30
      Policies:
        - AWSLambdaFullAccess 
        - AmazonDynamoDBFullAccess
        - AmazonSESFullAccess
      Events:
        DailyEmail:
          Type: Schedule
          Properties:
            Schedule: rate(1 day)
      Environment:
        Variables:
          Users: !Ref SAMUsers
  SAMUsers:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: email
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1       